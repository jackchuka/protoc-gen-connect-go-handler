// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/test/v1/test_service.proto

package testv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "example.com/test/gen/proto/test/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// TestServiceName is the fully-qualified name of the TestService service.
	TestServiceName = "test.v1.TestService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TestServiceEchoProcedure is the fully-qualified name of the TestService's Echo RPC.
	TestServiceEchoProcedure = "/test.v1.TestService/Echo"
	// TestServiceEchoSummaryProcedure is the fully-qualified name of the TestService's EchoSummary RPC.
	TestServiceEchoSummaryProcedure = "/test.v1.TestService/EchoSummary"
)

// TestServiceClient is a client for the test.v1.TestService service.
type TestServiceClient interface {
	// Echo returns the input message
	Echo(context.Context, *connect.Request[v1.EchoRequest]) (*connect.Response[v1.EchoResponse], error)
	// EchoSummary aggregates previous echoes
	EchoSummary(context.Context, *connect.Request[v1.EchoSummaryRequest]) (*connect.Response[v1.EchoSummaryResponse], error)
}

// NewTestServiceClient constructs a client for the test.v1.TestService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTestServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TestServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &testServiceClient{
		echo: connect.NewClient[v1.EchoRequest, v1.EchoResponse](
			httpClient,
			baseURL+TestServiceEchoProcedure,
			opts...,
		),
		echoSummary: connect.NewClient[v1.EchoSummaryRequest, v1.EchoSummaryResponse](
			httpClient,
			baseURL+TestServiceEchoSummaryProcedure,
			opts...,
		),
	}
}

// testServiceClient implements TestServiceClient.
type testServiceClient struct {
	echo        *connect.Client[v1.EchoRequest, v1.EchoResponse]
	echoSummary *connect.Client[v1.EchoSummaryRequest, v1.EchoSummaryResponse]
}

// Echo calls test.v1.TestService.Echo.
func (c *testServiceClient) Echo(ctx context.Context, req *connect.Request[v1.EchoRequest]) (*connect.Response[v1.EchoResponse], error) {
	return c.echo.CallUnary(ctx, req)
}

// EchoSummary calls test.v1.TestService.EchoSummary.
func (c *testServiceClient) EchoSummary(ctx context.Context, req *connect.Request[v1.EchoSummaryRequest]) (*connect.Response[v1.EchoSummaryResponse], error) {
	return c.echoSummary.CallUnary(ctx, req)
}

// TestServiceHandler is an implementation of the test.v1.TestService service.
type TestServiceHandler interface {
	// Echo returns the input message
	Echo(context.Context, *connect.Request[v1.EchoRequest]) (*connect.Response[v1.EchoResponse], error)
	// EchoSummary aggregates previous echoes
	EchoSummary(context.Context, *connect.Request[v1.EchoSummaryRequest]) (*connect.Response[v1.EchoSummaryResponse], error)
}

// NewTestServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTestServiceHandler(svc TestServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	testServiceEchoHandler := connect.NewUnaryHandler(
		TestServiceEchoProcedure,
		svc.Echo,
		opts...,
	)
	testServiceEchoSummaryHandler := connect.NewUnaryHandler(
		TestServiceEchoSummaryProcedure,
		svc.EchoSummary,
		opts...,
	)
	return "/test.v1.TestService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TestServiceEchoProcedure:
			testServiceEchoHandler.ServeHTTP(w, r)
		case TestServiceEchoSummaryProcedure:
			testServiceEchoSummaryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTestServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTestServiceHandler struct{}

func (UnimplementedTestServiceHandler) Echo(context.Context, *connect.Request[v1.EchoRequest]) (*connect.Response[v1.EchoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("test.v1.TestService.Echo is not implemented"))
}

func (UnimplementedTestServiceHandler) EchoSummary(context.Context, *connect.Request[v1.EchoSummaryRequest]) (*connect.Response[v1.EchoSummaryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("test.v1.TestService.EchoSummary is not implemented"))
}
